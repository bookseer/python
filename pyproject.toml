#======================================================================================================================
# Poetry: Python dependency management and packaging made easy
# https://python-poetry.org/
#======================================================================================================================
[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "bookseer-python"
version = "2025.03.02"
description = "Программирование на Pyhton"
authors = [
    {name = "Alexander Krasnikov aka askras", email = "askrasnikov@gmail.com"},
]
maintainers = [
    {name = "Alexander Krasnikov aka askras", email = "askrasnikov@gmail.com"},
]
license = {text = "CC BY 4.0"}
readme = "README.md"
keywords = ["python", "development", "programming"]
packages = [{include = "bookseer", from = "src"}]
exclude = ["book/*"]
classifiers = [ # https://pypi.org/classifiers/
    "Development Status :: 3 - Alpha",
    "Framework :: Sphinx",
    "Intended Audience :: Education",
    "Intended Audience :: Developers",
    "License :: Freeware", #CC BY 4.0 License
    "Natural Language :: Russian",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Topic :: Education"
]


#======================================================================================================================
# Project's dependencies
# https://pypi.org/
#======================================================================================================================
requires-python = ">=3.10,<4.0"
dependencies = [ # Dependencies required for this books
    "tqdm (>=4.67.1,<5.0.0)" # Fast, Extensible Progress Meter
]

[tool.poetry.group.jupyter.dependencies] # Dependencies required for JupyterBook
ipywidgets = "~8.1" # Jupyter interactive widgets
jupyterlab = "~4.3" # JupyterLab computational environment
jupyterlab-myst = "~2.4" # Use MyST in JupyterLab
jupyterlab-rise = "~0.43" # RISE: "Live" Reveal.js JupyterLab Slideshow extension
jupyterquiz = "^2.8.1" # Interactive quizzes for Jupyter and Jupyter Book
jupyter-tikz = "^0.5.6" # IPython Magics for rendering TeX/TikZ in Jupyter Notebooks
jupytext = "~1.16" # Jupyter notebooks as Markdown documents, Julia, Python or R scripts
lxml = "~5.3" # Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API
notebook = "~7.3" # A web-based notebook environment for interactive computing
sphinx-click = "~6.0" # Sphinx extension that automatically documents click applications
sphinxcontrib-asciinema = "~0.4" # Embed asciinema casts in your Sphinx docs
sphinx-inline-tabs = "~2023.4" # Add inline tabbed content to your Sphinx documentation
sphinx-proof = "~0.2" # A Sphinx extension for producing proofs, theorems, axioms, etc.
sphinx-togglebutton = "~0.3" # Toggle page content and collapse admonitions in Sphinx
sphinxext-rediraffe = "~0.2" # Sphinx Extension that redirects non-existent pages to working pages
watermark = "~2.5" # IPython magic function to print date/time stamps and various system information

[tool.poetry.group.dev.dependencies]
asciinema = "~2.4" # Terminal session recorder
asciinema-automation = "~0.2" # CLI utility to automate asciinema
asciinema-scene = "~0.9" # Toolbox to edit asciinema screencasts (sciine)
ghp-import = "~2.1" # Copy your docs directly to the gh-pages branch
jupyter-book = "~1.0" # Build a book with Jupyter Notebooks and Sphinx
line-profiler = "~4.2" # Line-by-line profiler
pip = "~25.0" # The PyPA recommended tool for installing Python packages
poetry-exec-plugin = {git = "https://github.com/askras/poetry-exec-plugin.git"} # A plugin for poetry that allows you to execute scripts defined in your pyproject.toml
poetry-plugin-export = "~1.9" # Poetry plugin to export the dependencies to various formats
pyautogui = "~0.9" # Control the mouse and keyboard, and other GUI automation tasks
pyppeteer = "~2.0" # Headless chrome/chromium automation library (unofficial port of puppeteer)
spyder = "~6.0" # The Python IDE that scientists and data analysts deserve
spyder-line-profiler = "~0.4" # A plugin to run the Python line profiler
spyder-notebook = "~0.6" # A plugin that allows you to open, edit and interact with Jupyter Notebooks inside Spyder
spyder-terminal = "~1.2" # A plugin that allows you to have integrated system terminals inside Spyder
termtosvg = "~1.1" # Record terminal sessions as SVG animations

[tool.poetry.group.test.dependencies]
bandit = "~1.8" # Security oriented static analyser for python code
black = "~25.1" # The uncompromising code formatter
isort = "~6.0" # A Python utility / library to sort Python imports
mypy = "~1.15" # Optional static typing for Python
nbqa = "~1.9" # Run any standard Python code quality tool on a Jupyter Notebook
pre-commit = "~4.1" # A framework for managing and maintaining multi-language pre-commit hooks
pre-commit-hooks = "~5.0" # Some out-of-the-box hooks for pre-commit
pylint = "~3.3" # Python code static checker
pytest = "~8.3" # Simple powerful testing with Python
pyupgrade = "~3.19" # A tool to automatically upgrade syntax for newer versions


#======================================================================================================================
# The URLs of the project
# https://python-poetry.org/docs/pyproject#urls
#======================================================================================================================
[project.urls]
homepage = "https://python.bookseer.org"
repository = "http://github.com/bookseer/python"
documentation = "https://python.bookseer.org/docs.html"
"Bug Tracker" = "https://github.com/bookseer/python/issues"


#======================================================================================================================
# Optional dependencies, which enhance a package, but are not required and clusters of optional dependencies
# https://python-poetry.org/docs/pyproject#optional-dependencies
#======================================================================================================================
[project.optional-dependencies]


#======================================================================================================================
# Scripts or executables that will be installed when installing the package
# https://python-poetry.org/docs/pyproject#scripts
#======================================================================================================================
[tool.poetry.scripts]


#======================================================================================================================
# A plugin for poetry that allows you to execute scripts, just like you can in npm or pipenv
# https://pypi.org/project/poetry-exec-plugin/
#======================================================================================================================
[tool.poetry-exec-plugin.commands]

init_venv = """
echo 'Init poetry virtual environment'
poetry install --no-root
pre-commit install
"""

clean_venv = """
echo 'Clean poetry virtual environment'
poetry env remove --all
rm -rf ./poetry.lock
"""

update_requirements = """
echo 'Update poetry virtual environment'
poetry update
poetry lock --regenerate
poetry export --format requirements.txt --output ./requirements.txt --without-hashes \
    --with jupyter \
    --with dev \
    --with test
poetry export --format requirements.txt --output ./requirements_colab.txt --without-hashes \
    --with jupyter
poetry export --format requirements.txt --output ./.binder/requirements.txt --without-hashes \
    --with jupyter
pre-commit autoupdate --freeze
poetry show --top-level --outdated
"""

precommit = """
echo 'Run pre-commit'
pre-commit run --all-files
"""

jupyter = """
echo 'Start Jupyter Lab without token'
export JUPYTERLAB_SETTINGS_DIR=./.jupyterlab_config/user-settings
export JUPYTERLAB_WORKSPACES_DIR=./.jupyterlab_config/workspaces
python -m jupyter lab --allow-root --NotebookApp.token='' --NotebookApp.password='' --no-browser
"""

spyder = """
echo 'Start Spyder'
spyder --workdir=./ --window-title bookseer-python --project ./ --conf-dir ./.spyder_config
"""

debug_book = """
echo 'Debug book'
jupyter-book clean --all ./book/
shopt -s globstar
rm **/*.ipynb
jupyter-book build --all --warningiserror --nitpick --verbose --keep-going ./book/
"""

build_book = """
echo 'Build book'
jupyter-book clean --all ./book/
shopt -s globstar
rm **/*.ipynb
jupyter-book build --all --builder html ./book/
jupyter-book build --all --builder pdflatex ./book/
"""

publish_book = """
echo 'Build and publish book'
poetry exec build_book
ghp-import ./book/_build/html --no-jekyll --push --force --cname=python.bookseer.org
"""

clean_book = """
echo 'Clean book'
jupyter-book clean --all ./book/
"""


#======================================================================================================================
# bandit: Security oriented static analyser for python code
# https://github.com/PyCQA/bandit
#======================================================================================================================
[tool.bandit]
exclude_dirs = ["tests",]
#tests = ["B201", "B301"]
#skips = ["B101", "B601"]
skips = ["B311",]
recursive = true

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
    "os.execl",
    "os.execle",
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile",
]

shell = [
    "os.system",
    "os.popen",
    "os.popen2",
    "os.popen3",
    "os.popen4",
    "popen2.popen2",
    "popen2.popen3",
    "popen2.popen4",
    "popen2.Popen3",
    "popen2.Popen4",
    "commands.getoutput",
    "commands.getstatusoutput",
]

subprocess = [
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.check_call",
    "subprocess.check_output",
]


#======================================================================================================================
# black: Uncompromising Python code formatter
# https://github.com/psf/black
#======================================================================================================================
[tool.black]
line-length = 120
target-version = ['py310']
#skip-string-normalization = true
#quiet = true


#======================================================================================================================
# isort: Uncompromising Python code formatter
# https://github.com/PyCQA/isort
#======================================================================================================================
[tool.isort]
line_length = 120
include_trailing_comma = true


#======================================================================================================================
# Jupytext: Jupyter notebooks as Markdown documents, Julia, Python or R scripts
# https://github.com/mwouts/jupytext
#======================================================================================================================
[tool.jupytext]
#notebook_extensions = "md"
formats = "ipynb,md:myst"


#======================================================================================================================
# mypy: Static type checking with mypy
# https://github.com/python/mypy
#======================================================================================================================
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
#disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "machinelearning.*"


#======================================================================================================================
# pylint: Python code static checker
# https://github.com/pylint-dev/pylint
#======================================================================================================================
# This Pylint rcfile contains a best-effort configuration to uphold the best-practices and style described in PEP8
# https://peps.python.org/pep-0008/
#
# This file is based on the Google Python style guide https://google.github.io/styleguide/pyguide.html
# Its canonical open-source location is: https://google.github.io/styleguide/pylintrc


[tool.pylint."MAIN"]

# Files or directories to be skipped. They should be base names, not paths.
ignore = "third_party"

# Files or directories matching the regex patterns are skipped. The regex matches against base names, not paths.
#ignore-patterns =

# Pickle collected data for later comparisons.
persistent = "no"

# List of plugins (as comma separated values of python modules names) to load, usually to register additional checkers.
#load-plugins =

# Use multiple processes to speed up Pylint.
jobs = 4

# Allow loading of arbitrary C extensions.
# Extensions are imported into the active Python interpreter and may run arbitrary code.
unsafe-load-any-extension = "no"


[tool.pylint."MESSAGES CONTROL"]

# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
#confidence =

# Enable the message, report, category or checker with the given id(s).
# You can either give multiple identifier separated by comma (,) or put this option multiple time
# (only on the command line, not in the configuration file where it should appear only once).
# See also the "--disable" option for examples.
#enable =

# Disable the message, report, category or checker with the given id(s).
# You can either give multiple identifiers separated by comma (,) or put this option multiple times
# (only on the command line, not in the configuration file where it should appear only once).
# You can also use "--disable=all" to disable everything first and then reenable specific checks.
# For example, if you want to run only the similarities checker, you can use "--disable=all --enable=similarities".
# If you want to run only the classes checker, but have no Warning level messages displayed,
# use "--disable=all --enable=classes --disable=W"
disable = """
    R,
    abstract-method,
    apply-builtin,
    arguments-differ,
    attribute-defined-outside-init,
    backtick,
    bad-option-value,
    basestring-builtin,
    buffer-builtin,
    c-extension-no-member,
    consider-using-enumerate,
    cmp-builtin,
    cmp-method,
    coerce-builtin,
    coerce-method,
    delslice-method,
    div-method,
    eq-without-hash,
    execfile-builtin,
    file-builtin,
    filter-builtin-not-iterating,
    fixme,
    getslice-method,
    global-statement,
    hex-method,
    idiv-method,
    implicit-str-concat,
    import-error,
    import-self,
    import-star-module-level,
    input-builtin,
    intern-builtin,
    invalid-str-codec,
    locally-disabled,
    long-builtin,
    long-suffix,
    map-builtin-not-iterating,
    misplaced-comparison-constant,
    missing-function-docstring,
    metaclass-assignment,
    next-method-called,
    next-method-defined,
    no-absolute-import,
    no-init,  # added
    no-member,
    no-name-in-module,
    no-self-use,
    nonzero-method,
    oct-method,
    old-division,
    old-ne-operator,
    old-octal-literal,
    old-raise-syntax,
    parameter-unpacking,
    print-statement,
    raising-string,
    range-builtin-not-iterating,
    raw_input-builtin,
    rdiv-method,
    reduce-builtin,
    relative-import,
    reload-builtin,
    round-builtin,
    setslice-method,
    signature-differs,
    standarderror-builtin,
    suppressed-message,
    sys-max-int,
    trailing-newlines,
    unichr-builtin,
    unicode-builtin,
    unnecessary-pass,
    unpacking-in-except,
    useless-else-on-loop,
    useless-suppression,
    using-cmp-argument,
    wrong-import-order,
    xrange-builtin,
    zip-builtin-not-iterating,
"""


[tool.pylint.REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs (visual studio) and html.
# You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass.
output-format = "text"

# Tells whether to display a full report or only the messages.
reports = "no"

# Python expression which should return a note less than 10 (10 is the highest note).
# You have access to the variables errors warning, statement which respectively contain the number of errors / warnings
# messages and the total number of statements analyzed.
# This is used by the global evaluation report (RP0004).
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"

# Template used to display messages.
# This is a python new-style format string used to format the message information. See doc for all details.
#msg-template=


[tool.pylint."BASIC"]

# Good variable names which should always be accepted, separated by a comma.
good-names = """
    main,
    _,
"""

# Bad variable names which should always be refused, separated by a comma.
#bad-names =

# Colon-delimited sets of names that determine each other's naming style when the name regexes allow several styles.
#name-group =

# Include a hint for the correct naming format with invalid-name.
include-naming-hint = "no"

# List of decorators that produce properties, such as abc.abstractproperty.
# Add to this list to register other decorators that produce valid properties.
property-classes="""
    abc.abstractproperty,
    cached_property.cached_property,
    cached_property.threaded_cached_property,
    cached_property.cached_property_with_ttl,
    cached_property.threaded_cached_property_with_ttl,
"""

# Regular expression matching correct function names.
function-rgx = "^(?:(?P<exempt>setUp|tearDown|setUpModule|tearDownModule)|(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$"

# Regular expression matching correct variable names.
variable-rgx = "^[a-z][a-z0-9_]*$"

# Regular expression matching correct constant names.
const-rgx = "^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$"

# Regular expression matching correct attribute names.
attr-rgx = "^_{0,2}[a-z][a-z0-9_]*$"

# Regular expression matching correct argument names.
argument-rgx = "^[a-z][a-z0-9_]*$"

# Regular expression matching correct class attribute names.
class-attribute-rgx = "^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$"

# Regular expression matching correct inline iteration names.
inlinevar-rgx = "^[a-z][a-z0-9_]*$"

# Regular expression matching correct class names.
class-rgx = "^_?[A-Z][a-zA-Z0-9]*$"

# Regular expression matching correct module names.
module-rgx = "^(_?[a-z][a-z0-9_]*|__init__)$"

# Regular expression matching correct method names.
method-rgx = "(?x)^(?:(?P<exempt>_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase|tearDownTestCase|setupSelf|tearDownClass|setUpClass|(test|assert)_*[A-Z0-9][a-zA-Z0-9_]*|next)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9_]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$"

# Regular expression which should only match function or class names that do not require a docstring.
no-docstring-rgx = "(__.*__|main|test.*|.*test|.*Test)$"

# Minimum line length for functions/classes that require docstrings, shorter ones are exempt.
docstring-min-length = 10


[tool.pylint."TYPECHECK"]

# List of decorators that produce context managers, such as contextlib.contextmanager.
# Add to this list to register other decorators that produce valid context managers.
contextmanager-decorators = """
    contextlib.contextmanager,
    contextlib2.contextmanager,
"""

# Tells whether missing members accessed in mixin class should be ignored.
# A mixin class is detected if its name ends with "mixin" (case-insensitive).
ignore-mixin-members = "yes"

# List of module names for which member attributes should not be checked.
# Useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis.
# It supports qualified module names, as well as Unix pattern matching.
#ignored-modules=

# List of class names for which member attributes should not be checked.
# Useful for classes with dynamically set attributes. This supports the use of qualified names.
ignored-classes = """
    optparse.Values,
    thread._local,
    _thread._local,
"""

# List of members which are set dynamically and missed by pylint inference system,
# and so shouldn't trigger E1101 when accessed.
# Python regular expressions are accepted.
#generated-members =


[tool.pylint."FORMAT"]

# Maximum number of characters on a single line.
max-line-length = 120

# TODO(https://github.com/pylint-dev/pylint/issues/3352):
# Direct pylint to exempt # lines made too long by directives to pytype.


# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = '''(?x)(
    ^\s*(\#\ )?<?https?://\S+>?$|
    ^\s*(from\s+\S+\s+)?import\s+.+$)
'''

# Allow the body of an if to be on the same line as the test if there is no else.
single-line-if-stmt = "yes"

# Maximum number of lines in a module.
max-module-lines = 99999

# String used as indentation unit.
indent-string = "    "

# Number of spaces of indent required inside a hanging  or continued line.
indent-after-paren = 4

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format = "LF"


[tool.pylint."MISCELLANEOUST"]

# List of note tags to take in consideration, separated by a comma.
notes = "TODO"


[tool.pylint."STRING"]

# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency = "yes"


[tool.pylint."VARIABLES"]

# Tells whether we should check for unused import in __init__ files.
init-import = "no"

# A regular expression matching the name of dummy variables (i.e. expectedly not used).
dummy-variables-rgx = '^\*{0,2}(_$|unused_|dummy_)'

# List of additional names supposed to be defined in builtins.
# Remember that you should avoid to define new builtins when possible.
#additional-builtins =

# List of strings which can identify a callback function by name.
# A callback name must start or end with one of those strings.
callbacks = """
    cb_,
    _cb,
"""

# List of qualified module names which can have objects that can redefine builtins.
redefining-builtins-modules = """
    six,
    six.moves,
    past.builtins,
    future.builtins,
    functools,
"""


[tool.pylint."LOGGING"]

# Logging modules to check that the string format arguments are in logging function parameter format
logging-modules = """
   logging,
   absl.logging,
   tensorflow.io.logging,
"""


[tool.pylint."SIMILARITIES"]

# Minimum lines number of a similarity.
min-similarity-lines = 4

# Ignore comments when computing similarities.
ignore-comments = "yes"

# Ignore docstrings when computing similarities.
ignore-docstrings = "yes"

# Ignore imports when computing similarities.
ignore-imports = "no"


[tool.pylint."SPELLING"]

# Spelling dictionary name. Available dictionaries: none. To make it working install python-enchant package.
#spelling-dict=

# List of comma separated words that should not be checked.
#spelling-ignore-words =

# A path to a file that contains private dictionary; one word per line.
#spelling-private-dict-file =

# Tells whether to store unknown words to indicated private dictionary
# in --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words = "no"


[tool.pylint."IMPORTS"]

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules = """
    regsub,
    TERMIOS,
    Bastion,
    rexec,
    sets,
"""

# Create a graph of every (i.e. internal and external) dependencies in the given file
# (report RP0402 must not be disabled).
#import-graph =

# Create a graph of external dependencies in the given file (report RP0402 must not be disabled).
#ext-import-graph =

# Create a graph of internal dependencies in the given file (report RP0402 must not be disabled).
#int-import-graph =

# Force import order to recognize a module as part of the standard compatibility libraries.
#known-standard-library =

# Force import order to recognize a module as part of a third party library.
known-third-party = """
    enchant,
    absl,
"""

# Analyse import fallback blocks.
# This can be used to support both Python 2 and 3 compatible code, which means that the block might have code
#  that exists only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks = "no"


[tool.pylint."CLASSES"]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = """
    __init__,
    __new__,
    setUp,
"""

# List of member names, which should be excluded from the protected access warning.
exclude-protected = """
    _asdict,
    _fields,
    _replace,
    _source,
    _make,
"""

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = """
    cls,
    class_,
"""

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = "mcs"


[tool.pylint."EXCEPTIONS"]

# Exceptions that will emit a warning when being caught. Defaults to "Exception".
overgeneral-exceptions = """
    builtins.StandardError,
    builtins.Exception,
    builtins.BaseException,
"""
